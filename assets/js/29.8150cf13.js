(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{409:function(e,a,t){"use strict";t.r(a);var s=t(41),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#日志"}},[e._v("#")]),e._v(" 日志")]),e._v(" "),t("h2",{attrs:{id:"拦截日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拦截日志"}},[e._v("#")]),e._v(" 拦截日志")]),e._v(" "),t("p",[e._v("拦截日志日志存储在 error.log 中。拦截记录的日志等级为 ALERT。\n格式为 "),t("code",[e._v("ngx_waf: [规则类型][触发的具体规则]")]),e._v("。")]),e._v(" "),t("p",[e._v("您可以使用下列命令快速查看拦截日志。")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" /path/to/error.log "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" ngx_waf\n")])])]),t("p",[e._v("下面是两个例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('2020/01/20 22:56:30 [alert] 6666#0: *30 ngx_waf: [BLACK-URL][(?i)(?:/\\.env$)], client: 192.168.1.1, server: example.com, request: "GET /v1/.env HTTP/1.1", host: "example.com", referrer: "http:/example.com/v1/.env"\n\n2020/01/20 22:58:40 [alert] 6667#0: *11 ngx_waf: [BLACK-POST][(?i)(?:select.+(?:from|limit))], client: 192.168.1.1, server: example.com, request: "POST /xmlrpc.php HTTP/1.1", host: "example.com", referrer: "https://example.com/"\n')])])]),t("h2",{attrs:{id:"调试日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调试日志"}},[e._v("#")]),e._v(" 调试日志")]),e._v(" "),t("p",[e._v("当您在 nginx 的配置文件中将错误日志的等级调整为 "),t("code",[e._v("debug")]),e._v(" 时，会在 error.log 中输出调试日志，\n用以排障。格式为 "),t("code",[e._v("ngx_waf_debug: 调试信息")]),e._v("。")]),e._v(" "),t("p",[e._v("您可以使用下列命令快速查看调试日志。")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" /path/to/error.log "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" ngx_waf_debug\n")])])]),t("p",[e._v("下面是一段典型的调式日志，指示了一次 CC 防御检测的流程。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("2021/02/21 20:35:33 [debug] 6666#0: *1 ngx_waf_debug: Start the CC inspection process.\n2021/02/21 20:35:33 [debug] 6666#0: *1 ngx_waf_debug: The module context has been obtained.\n2021/02/21 20:35:33 [debug] 6666#0: *1 ngx_waf_debug: The configuration of the module has been obtained.\n2021/02/21 20:35:33 [debug] 6666#0: *1 ngx_waf_debug: Detection has begun.\n2021/02/21 20:35:33 [debug] 6666#0: *1 ngx_waf_debug: Shared memory is locked.\n2021/02/21 20:35:33 [debug] 6666#0: *1 ngx_waf_debug: Shared memory is unlocked.\n2021/02/21 20:35:33 [debug] 6666#0: *1 ngx_waf_debug: Detection is over.\n2021/02/21 20:35:33 [debug] 6666#0: *1 ngx_waf_debug: The CC detection process is fully completed.\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);